// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AUT02_04Discos.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;

namespace AUT02_04Discos.Data
{
    public partial class ChinookContext : IdentityDbContext //implementar la interfaz IdentityDbContext
    {
        public ChinookContext()
        {
        }

        public ChinookContext(DbContextOptions<ChinookContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
        

        //borrar cadena de conexión

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Album>().ToTable("Album", x => x.ExcludeFromMigrations());
            modelBuilder.Entity<Artist>().ToTable("Artist", x => x.ExcludeFromMigrations());
            modelBuilder.Entity<Track>().ToTable("Track", x => x.ExcludeFromMigrations());
            modelBuilder.Entity<Customer>().ToTable("Customer", x => x.ExcludeFromMigrations());
            modelBuilder.Entity<Invoice>().ToTable("Invoice", x => x.ExcludeFromMigrations());

            modelBuilder.Entity<Album>(entity =>
            {
                //entity.Property(e => e.AlbumId).ValueGeneratedNever();    PARA CREAR LOS ID

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlbumArtistId");
            });

            /*modelBuilder.Entity<Artist>(entity =>
            {
                entity.Property(e => e.ArtistId).ValueGeneratedNever();
            });*/

            modelBuilder.Entity<Track>(entity =>
            {
                entity.Property(e => e.TrackId).ValueGeneratedNever();

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Tracks)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_TrackAlbumId");
            });

            //sobreescribir el metodo onmodelcreating
            base.OnModelCreating(modelBuilder);

            //crear lista usuarios + crear administrador y manager
            List<IdentityUser> listaUser = new List<IdentityUser>();
            listaUser.Add(new IdentityUser()
            {
                UserName = "admin@gmail.com",
                NormalizedUserName = "ADMIN@GMAIL.COM",
                Email = "admin@gmail.com",
                NormalizedEmail = "ADMIN@GMAIL.COM",
                EmailConfirmed = true
            });

            listaUser.Add(new IdentityUser()
            {
                UserName = "manager@gmail.com",
                NormalizedUserName = "MANAGER@GMAIL.COM",
                Email = "manager@gmail.com",
                NormalizedEmail = "MANAGER@GMAIL.COM",
                EmailConfirmed = true
            });

            listaUser.Add(new IdentityUser()
            {
                UserName = "comercial1@disquera.com",
                NormalizedUserName = "COMERCIAL1@DISQUERA.COM",
                Email = "comercial1@disquera",
                NormalizedEmail = "COMERCIAL1@DISQUERA.COM",
                EmailConfirmed = true
            });


            listaUser.Add(new IdentityUser()
            {
                UserName = "comercial2@disquera.com",
                NormalizedUserName = "COMERCIAL2@DISQUERA.COM",
                Email = "comercial2@disquera.com",
                NormalizedEmail = "COMERCIAL2@DISQUERA.COM",
                EmailConfirmed = true
            }); 

            modelBuilder.Entity<IdentityUser>().HasData(listaUser);
            var passwordHasser = new PasswordHasher<IdentityUser>();
            listaUser[0].PasswordHash = passwordHasser.HashPassword(listaUser[0], "entrar");
            listaUser[1].PasswordHash = passwordHasser.HashPassword(listaUser[1], "entrar");
            listaUser[2].PasswordHash = passwordHasser.HashPassword(listaUser[2], "entrar");
            listaUser[3].PasswordHash = passwordHasser.HashPassword(listaUser[3], "entrar");

            //crear lista roles (admin,manager,usuarios)
            List<IdentityRole> listaRoles = new List<IdentityRole>();
            listaRoles.Add(new IdentityRole()
            {
                Name = "Admin",
                NormalizedName = "ADMIN"
            });
            listaRoles.Add(new IdentityRole()
            {
                Name = "Manager",
                NormalizedName = "MANAGER"
            });
            listaRoles.Add(new IdentityRole()
            {
                Name = "User",
                NormalizedName = "USER"
            });
            listaRoles.Add(new IdentityRole()
            {
                Name = "Comercial",
                NormalizedName = "COMERCIAL"
            }); 
            modelBuilder.Entity<IdentityRole>().HasData(listaRoles);

            //crear lista usuarios+roles
            List<IdentityUserRole<string>> listaUserRole = new List<IdentityUserRole<string>>();
            listaUserRole.Add(new IdentityUserRole<string>()
            {
                UserId = listaUser[0].Id,
                RoleId = listaRoles[0].Id

            });

            listaUserRole.Add(new IdentityUserRole<string>()
            {
                UserId = listaUser[1].Id,
                RoleId = listaRoles[1].Id

            });
            listaUserRole.Add(new IdentityUserRole<string>()
            {
                UserId = listaUser[2].Id,
                RoleId = listaRoles[3].Id

            });
            listaUserRole.Add(new IdentityUserRole<string>()
            {
                UserId = listaUser[3].Id,
                RoleId = listaRoles[3].Id

            });
            modelBuilder.Entity<IdentityUserRole<string>>().HasData(listaUserRole);
        }
        

        //borrar cadena de conexión

        public DbSet<AUT02_04Discos.Models.Customer> Customer { get; set; }
        

        //borrar cadena de conexión

        public DbSet<AUT02_04Discos.Models.Invoice> Invoice { get; set; }

        //partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}